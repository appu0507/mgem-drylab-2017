from random import randint
from difflib import SequenceMatcher
def aptamer_maker(): # function to generate a random aptamer 20 nucleotides long
	aptamer = ""
	for i in range(0,20):
		n = randint(0,3)
		if n == 0:
			aptamer += "A"
		elif n == 1:
			aptamer += "C"
		elif n == 2:
			aptamer += "G"
		else:
			aptamer += "T"
	return aptamer

# array containing 4 randomly generated aptamers, their sequences and affinity scores
parents = 6 # number of parent aptamers 
aptamers = []

for i in range(0,parents):
	aptamers.append(["aptamer_" + str(i),aptamer_maker(),randint(0,100)])

sorted_aptamers = sorted(aptamers, key=lambda x: x[2], reverse=True) # sorts aptamers from highest to lowest affinity scores

offspring = 8 # desired number of offspring
top_parents = 3 # desired number of top scoring parents to cross
bred_aptamers = []

# the two highest scoring aptamers are randomly crossed over to generate a specified number of offspring
for i in range(0,offspring):
	x = randint(0,19) # random nucleotide postion along the 20 bp aptamer
	y = randint(0,top_parents - 1)
	if x == 0:
		bred_aptamers.append(["offspring_" + str(i),sorted_aptamers[y][1]])	
	elif x == 19:
		bred_aptamers.append(["offspring_" + str(i),sorted_aptamers[y][1]])
	else:
		bred_aptamers.append(["offspring_" + str(i),sorted_aptamers[y][1][0:x] + sorted_aptamers[2 - y][1][x + 1:19]])
#print bred_aptamers
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##made by sid for gluedtogether.py
#def generateAptamer(length=20): # function to generate a random aptamer length nucleotides long
#	aptamer = ""
#	for i in range(0,length):
#		n = randint(0,3)
#		if n == 0:
#			aptamer += "A"
#		elif n == 1:
#			aptamer += "C"
#		elif n == 2:
#			aptamer += "G"
#		else:
#			aptamer += "T"
#	return aptamer
#
#def genPool(pool_size, apt_size=20):
#	aptamerList = []
#	for i in range(1,pool_size):
#		aptamerList.append(['aptamer_' + str(i), generateAptamer(apt_size), randint(0,100)])
#	return sorted(aptamerList, key=lambda x: x[2], reverse=True) 
#
##uses damoru-levenshtein distance and size to compute child fitness from parent fitness
#def computeChildFitness(parent1, parent2, child):
#	#take distance to parent1, divide by len(child), then multiply by parent1 fitness. repeat for parent 2 and add the fitness values. ???????????????
#	if parent1 == None and parent2 == None:
#		return child[3]
#	return None
#
#def crossover(parent1, parent2):
#	max_pos = min([len(parent1), len(parent2)])	
#	crossOverPos = randint(0,max_pos) # random nucleotide postion along the max_pos bp aptamer
#	if crossOverPos == 0:
#		bred_aptamers.append(["offspring_" + str(i), sortedAptamerList[cross_partner][1], computeChildFitness])	
#	elif crossOverPos == max_pos-1:
#		bred_aptamers.append(["offspring_" + str(i), sortedAptamerList[cross_partner][1]])
#	else:
#		bred_aptamers.append(["offspring_" + str(i),sortedAptamerList[cross_partner][1][0:crossOverPos] + sortedAptamerList[top_parents - cross_partner][1][crossOverPos + 1:max_pos]])
#	return child
#
##aptamer list format: [['aptamer_1, 'asdasdasdasd', 45], ['aptamer_2', 'asdasasdasd', 78]]
## the two highest scoring aptamers are randomly crossed over to generate a specified number of offspring
##TODO how to assign fitness scores to offspring generated from breeding
#
#def breed(sortedAptamerList, top_cutoff=-1, offspring=-1):
#	bred_aptamers = []
#	#elites is top 2%
#	for x in range(0, int(len(sortedAptamerList)*0.02)):
#		bred_aptamers.append(sortedAptamerList[x]
#	if top_cutoff == -1:
#		top_cutoff = len(sortedAptamerList)//5
#	if offspring == -1:
#		offspring = len(sortedAptamerList)
#	#assumed all aptamers are the same length
#	top_parents = sortedAptamerList[0:top_cutoff-1]
#	return bred_aptamers
